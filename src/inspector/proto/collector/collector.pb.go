// Code generated by protoc-gen-go. DO NOT EDIT.
// source: inspector/proto/collector/collector.proto

/*
Package collector is a generated protocol buffer package.

It is generated from these files:
	inspector/proto/collector/collector.proto

It has these top-level messages:
	CollectorQueryRequest
	CollectorQueryResponse
*/
package collector

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import core "inspector/proto/core"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CollectorQueryRequest struct {
	QueryList []*core.Query `protobuf:"bytes,1,rep,name=QueryList" json:"QueryList,omitempty"`
}

func (m *CollectorQueryRequest) Reset()                    { *m = CollectorQueryRequest{} }
func (m *CollectorQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*CollectorQueryRequest) ProtoMessage()               {}
func (*CollectorQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CollectorQueryRequest) GetQueryList() []*core.Query {
	if m != nil {
		return m.QueryList
	}
	return nil
}

type CollectorQueryResponse struct {
	Error       *core.Error       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	SuccessList []*core.InfoRange `protobuf:"bytes,2,rep,name=SuccessList" json:"SuccessList,omitempty"`
	FailureList []*core.InfoRange `protobuf:"bytes,3,rep,name=FailureList" json:"FailureList,omitempty"`
}

func (m *CollectorQueryResponse) Reset()                    { *m = CollectorQueryResponse{} }
func (m *CollectorQueryResponse) String() string            { return proto.CompactTextString(m) }
func (*CollectorQueryResponse) ProtoMessage()               {}
func (*CollectorQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CollectorQueryResponse) GetError() *core.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *CollectorQueryResponse) GetSuccessList() []*core.InfoRange {
	if m != nil {
		return m.SuccessList
	}
	return nil
}

func (m *CollectorQueryResponse) GetFailureList() []*core.InfoRange {
	if m != nil {
		return m.FailureList
	}
	return nil
}

func init() {
	proto.RegisterType((*CollectorQueryRequest)(nil), "CollectorQueryRequest")
	proto.RegisterType((*CollectorQueryResponse)(nil), "CollectorQueryResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Collector service

type CollectorClient interface {
	Query(ctx context.Context, in *CollectorQueryRequest, opts ...grpc.CallOption) (*CollectorQueryResponse, error)
}

type collectorClient struct {
	cc *grpc.ClientConn
}

func NewCollectorClient(cc *grpc.ClientConn) CollectorClient {
	return &collectorClient{cc}
}

func (c *collectorClient) Query(ctx context.Context, in *CollectorQueryRequest, opts ...grpc.CallOption) (*CollectorQueryResponse, error) {
	out := new(CollectorQueryResponse)
	err := grpc.Invoke(ctx, "/Collector/Query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Collector service

type CollectorServer interface {
	Query(context.Context, *CollectorQueryRequest) (*CollectorQueryResponse, error)
}

func RegisterCollectorServer(s *grpc.Server, srv CollectorServer) {
	s.RegisterService(&_Collector_serviceDesc, srv)
}

func _Collector_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectorQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Collector/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServer).Query(ctx, req.(*CollectorQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Collector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Collector",
	HandlerType: (*CollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _Collector_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inspector/proto/collector/collector.proto",
}

func init() { proto.RegisterFile("inspector/proto/collector/collector.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0xcc, 0xcc, 0x2b, 0x2e,
	0x48, 0x4d, 0x2e, 0xc9, 0x2f, 0xd2, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x4f, 0xce, 0xcf, 0xc9,
	0x81, 0xf0, 0xe1, 0x2c, 0x3d, 0xb0, 0x8c, 0x94, 0x3c, 0xa6, 0xd2, 0xa2, 0x54, 0x30, 0x01, 0x51,
	0xa0, 0x64, 0xcb, 0x25, 0xea, 0x0c, 0xd3, 0x13, 0x58, 0x9a, 0x5a, 0x54, 0x19, 0x94, 0x5a, 0x58,
	0x9a, 0x5a, 0x5c, 0x22, 0xa4, 0xc2, 0xc5, 0x09, 0xe6, 0xfb, 0x64, 0x16, 0x97, 0x48, 0x30, 0x2a,
	0x30, 0x6b, 0x70, 0x1b, 0xb1, 0xe9, 0x41, 0x54, 0x20, 0x24, 0x94, 0x26, 0x31, 0x72, 0x89, 0xa1,
	0xeb, 0x2f, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0x92, 0xe1, 0x62, 0x4d, 0x2d, 0x2a, 0xca, 0x2f,
	0x92, 0x60, 0x54, 0x60, 0x04, 0x6b, 0x76, 0x05, 0xf1, 0x82, 0x20, 0x82, 0x42, 0x3a, 0x5c, 0xdc,
	0xc1, 0xa5, 0xc9, 0xc9, 0xa9, 0xc5, 0xc5, 0x60, 0x0b, 0x98, 0xc0, 0x16, 0x70, 0xe9, 0x79, 0xe6,
	0xa5, 0xe5, 0x07, 0x25, 0xe6, 0xa5, 0xa7, 0x06, 0x21, 0x4b, 0x83, 0x54, 0xbb, 0x25, 0x66, 0xe6,
	0x94, 0x16, 0xa5, 0x82, 0x55, 0x33, 0x63, 0xaa, 0x46, 0x92, 0x36, 0x72, 0xe5, 0xe2, 0x84, 0xbb,
	0x49, 0xc8, 0x82, 0x8b, 0x15, 0xec, 0x2e, 0x21, 0x31, 0x3d, 0xac, 0x1e, 0x95, 0x12, 0xd7, 0xc3,
	0xee, 0x81, 0x24, 0x36, 0x70, 0x08, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x0a, 0xea,
	0xf5, 0x6f, 0x01, 0x00, 0x00,
}
