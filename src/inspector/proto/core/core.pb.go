// Code generated by protoc-gen-go. DO NOT EDIT.
// source: inspector/proto/core/core.proto

/*
Package core is a generated protocol buffer package.

It is generated from these files:
	inspector/proto/core/core.proto

It has these top-level messages:
	Header
	KVPair
	Info
	Index
	Query
	InfoRange
	Error
	ResponseItem
	Stat
*/
package core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Header struct {
	Service string `protobuf:"bytes,1,opt,name=Service" json:"Service,omitempty"`
	Hid     int32  `protobuf:"varint,2,opt,name=Hid" json:"Hid,omitempty"`
	Host    string `protobuf:"bytes,3,opt,name=Host" json:"Host,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Header) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *Header) GetHid() int32 {
	if m != nil {
		return m.Hid
	}
	return 0
}

func (m *Header) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type KVPair struct {
	Key   string `protobuf:"bytes,1,opt,name=Key" json:"Key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *KVPair) Reset()                    { *m = KVPair{} }
func (m *KVPair) String() string            { return proto.CompactTextString(m) }
func (*KVPair) ProtoMessage()               {}
func (*KVPair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *KVPair) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KVPair) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type Info struct {
	Header    *Header   `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
	Timestamp uint32    `protobuf:"varint,2,opt,name=Timestamp" json:"Timestamp,omitempty"`
	Count     uint32    `protobuf:"varint,3,opt,name=Count" json:"Count,omitempty"`
	Step      uint32    `protobuf:"varint,4,opt,name=Step" json:"Step,omitempty"`
	IndexList *Index    `protobuf:"bytes,5,opt,name=IndexList" json:"IndexList,omitempty"`
	Items     []*KVPair `protobuf:"bytes,6,rep,name=Items" json:"Items,omitempty"`
}

func (m *Info) Reset()                    { *m = Info{} }
func (m *Info) String() string            { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()               {}
func (*Info) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Info) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Info) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Info) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Info) GetStep() uint32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *Info) GetIndexList() *Index {
	if m != nil {
		return m.IndexList
	}
	return nil
}

func (m *Info) GetItems() []*KVPair {
	if m != nil {
		return m.Items
	}
	return nil
}

type Index struct {
	Key   string `protobuf:"bytes,1,opt,name=Key" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value" json:"Value,omitempty"`
}

func (m *Index) Reset()                    { *m = Index{} }
func (m *Index) String() string            { return proto.CompactTextString(m) }
func (*Index) ProtoMessage()               {}
func (*Index) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Index) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Index) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Query struct {
	Header    *Header  `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
	TimeBegin uint32   `protobuf:"varint,2,opt,name=TimeBegin" json:"TimeBegin,omitempty"`
	TimeEnd   uint32   `protobuf:"varint,3,opt,name=TimeEnd" json:"TimeEnd,omitempty"`
	Index     *Index   `protobuf:"bytes,4,opt,name=Index" json:"Index,omitempty"`
	KeyList   []string `protobuf:"bytes,5,rep,name=KeyList" json:"KeyList,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Query) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Query) GetTimeBegin() uint32 {
	if m != nil {
		return m.TimeBegin
	}
	return 0
}

func (m *Query) GetTimeEnd() uint32 {
	if m != nil {
		return m.TimeEnd
	}
	return 0
}

func (m *Query) GetIndex() *Index {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *Query) GetKeyList() []string {
	if m != nil {
		return m.KeyList
	}
	return nil
}

type InfoRange struct {
	Header *Header `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
	Count  uint32  `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty"`
	Step   uint32  `protobuf:"varint,3,opt,name=Step" json:"Step,omitempty"`
	Error  *Error  `protobuf:"bytes,4,opt,name=Error" json:"Error,omitempty"`
	Data   []byte  `protobuf:"bytes,5,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *InfoRange) Reset()                    { *m = InfoRange{} }
func (m *InfoRange) String() string            { return proto.CompactTextString(m) }
func (*InfoRange) ProtoMessage()               {}
func (*InfoRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *InfoRange) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *InfoRange) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *InfoRange) GetStep() uint32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *InfoRange) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *InfoRange) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Error struct {
	Errno  uint32 `protobuf:"varint,1,opt,name=Errno" json:"Errno,omitempty"`
	Errmsg string `protobuf:"bytes,2,opt,name=Errmsg" json:"Errmsg,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Error) GetErrno() uint32 {
	if m != nil {
		return m.Errno
	}
	return 0
}

func (m *Error) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

type ResponseItem struct {
	Header *Header `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
	Error  *Error  `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (m *ResponseItem) Reset()                    { *m = ResponseItem{} }
func (m *ResponseItem) String() string            { return proto.CompactTextString(m) }
func (*ResponseItem) ProtoMessage()               {}
func (*ResponseItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ResponseItem) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ResponseItem) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type Stat struct {
	InstanceCount uint64 `protobuf:"varint,1,opt,name=InstanceCount" json:"InstanceCount,omitempty"`
	ItemCount     uint64 `protobuf:"varint,2,opt,name=ItemCount" json:"ItemCount,omitempty"`
	CacheSize     uint64 `protobuf:"varint,3,opt,name=CacheSize" json:"CacheSize,omitempty"`
	QCount        uint64 `protobuf:"varint,4,opt,name=QCount" json:"QCount,omitempty"`
	QSize         uint64 `protobuf:"varint,5,opt,name=QSize" json:"QSize,omitempty"`
	CacheHitCount uint64 `protobuf:"varint,6,opt,name=CacheHitCount" json:"CacheHitCount,omitempty"`
}

func (m *Stat) Reset()                    { *m = Stat{} }
func (m *Stat) String() string            { return proto.CompactTextString(m) }
func (*Stat) ProtoMessage()               {}
func (*Stat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Stat) GetInstanceCount() uint64 {
	if m != nil {
		return m.InstanceCount
	}
	return 0
}

func (m *Stat) GetItemCount() uint64 {
	if m != nil {
		return m.ItemCount
	}
	return 0
}

func (m *Stat) GetCacheSize() uint64 {
	if m != nil {
		return m.CacheSize
	}
	return 0
}

func (m *Stat) GetQCount() uint64 {
	if m != nil {
		return m.QCount
	}
	return 0
}

func (m *Stat) GetQSize() uint64 {
	if m != nil {
		return m.QSize
	}
	return 0
}

func (m *Stat) GetCacheHitCount() uint64 {
	if m != nil {
		return m.CacheHitCount
	}
	return 0
}

func init() {
	proto.RegisterType((*Header)(nil), "Header")
	proto.RegisterType((*KVPair)(nil), "KVPair")
	proto.RegisterType((*Info)(nil), "Info")
	proto.RegisterType((*Index)(nil), "Index")
	proto.RegisterType((*Query)(nil), "Query")
	proto.RegisterType((*InfoRange)(nil), "InfoRange")
	proto.RegisterType((*Error)(nil), "Error")
	proto.RegisterType((*ResponseItem)(nil), "ResponseItem")
	proto.RegisterType((*Stat)(nil), "Stat")
}

func init() { proto.RegisterFile("inspector/proto/core/core.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcd, 0x8a, 0x13, 0x41,
	0x10, 0x66, 0x32, 0x3f, 0x21, 0x65, 0x02, 0xd2, 0x88, 0xcc, 0x21, 0xb2, 0x61, 0xd8, 0xc3, 0x9e,
	0x12, 0x51, 0x7c, 0x01, 0xd7, 0xc0, 0x84, 0x28, 0x98, 0x8e, 0xec, 0xbd, 0x9d, 0xd4, 0xc6, 0x01,
	0xd3, 0x3d, 0xf4, 0x74, 0xc4, 0xf8, 0x04, 0x3e, 0x82, 0x0f, 0xe2, 0xd1, 0x87, 0x93, 0xaa, 0xee,
	0xd9, 0xd9, 0x85, 0x85, 0xcd, 0x65, 0xa8, 0xef, 0xeb, 0xae, 0xea, 0xef, 0xfb, 0x8a, 0x81, 0x8b,
	0x5a, 0xb7, 0x0d, 0x56, 0xce, 0xd8, 0x45, 0x63, 0x8d, 0x33, 0x8b, 0xca, 0x58, 0xe4, 0xcf, 0x9c,
	0x71, 0x51, 0x42, 0x56, 0xa2, 0xda, 0xa1, 0x15, 0x39, 0x0c, 0xb7, 0x68, 0x7f, 0xd4, 0x15, 0xe6,
	0xd1, 0x2c, 0xba, 0x1a, 0xc9, 0x0e, 0x8a, 0xe7, 0x10, 0x97, 0xf5, 0x2e, 0x1f, 0xcc, 0xa2, 0xab,
	0x54, 0x52, 0x29, 0x04, 0x24, 0xa5, 0x69, 0x5d, 0x1e, 0xf3, 0x45, 0xae, 0x8b, 0xd7, 0x90, 0xad,
	0x6f, 0x3e, 0xab, 0xda, 0xd2, 0xfd, 0x35, 0x9e, 0xc2, 0x14, 0x2a, 0xc5, 0x0b, 0x48, 0x6f, 0xd4,
	0xf7, 0x23, 0xf2, 0x8c, 0xb1, 0xf4, 0xa0, 0xf8, 0x1b, 0x41, 0xb2, 0xd2, 0xb7, 0x46, 0x5c, 0x74,
	0x22, 0xb8, 0xe7, 0xd9, 0x9b, 0xe1, 0xdc, 0x43, 0xd9, 0x69, 0x9b, 0xc2, 0xe8, 0x4b, 0x7d, 0xc0,
	0xd6, 0xa9, 0x43, 0xc3, 0x33, 0x26, 0xb2, 0x27, 0x68, 0xfa, 0xb5, 0x39, 0x6a, 0x2f, 0x67, 0x22,
	0x3d, 0x20, 0x8d, 0x5b, 0x87, 0x4d, 0x9e, 0x30, 0xc9, 0xb5, 0xb8, 0x84, 0xd1, 0x4a, 0xef, 0xf0,
	0xe7, 0xc7, 0xba, 0x75, 0x79, 0xca, 0x6f, 0x65, 0x73, 0x66, 0x64, 0x7f, 0x20, 0x5e, 0x41, 0xba,
	0x72, 0x78, 0x68, 0xf3, 0x6c, 0x16, 0xb3, 0x1a, 0xef, 0x4b, 0x7a, 0xb6, 0x58, 0x40, 0xca, 0x77,
	0x9f, 0xf2, 0x39, 0xea, 0x7c, 0xfe, 0x89, 0x20, 0xdd, 0x1c, 0xd1, 0x9e, 0xce, 0x36, 0xfa, 0x1e,
	0xf7, 0xb5, 0xbe, 0x6f, 0x94, 0x09, 0x5a, 0x11, 0x81, 0xa5, 0xde, 0x05, 0xab, 0x1d, 0x14, 0xd3,
	0xa0, 0x89, 0xdd, 0xf6, 0xa6, 0x82, 0xd0, 0x1c, 0x86, 0x6b, 0x3c, 0x05, 0xd3, 0x31, 0xad, 0x36,
	0xc0, 0xe2, 0x77, 0x44, 0x89, 0xdc, 0x1a, 0xa9, 0xf4, 0x1e, 0x9f, 0x96, 0x77, 0x97, 0xf4, 0xe0,
	0xb1, 0xa4, 0xe3, 0x7b, 0x49, 0x4f, 0x21, 0x5d, 0x5a, 0x6b, 0xec, 0x9d, 0x20, 0x46, 0xd2, 0x93,
	0xd4, 0xf1, 0x41, 0x39, 0xc5, 0x2b, 0x18, 0x4b, 0xae, 0x8b, 0x77, 0xa1, 0x83, 0x1e, 0x59, 0x5a,
	0xab, 0x0d, 0x8b, 0x98, 0x48, 0x0f, 0xc4, 0x4b, 0xc8, 0x96, 0xd6, 0x1e, 0xda, 0x7d, 0xc8, 0x36,
	0xa0, 0xe2, 0x13, 0x8c, 0x25, 0xb6, 0x8d, 0xd1, 0x2d, 0xd2, 0x7a, 0xce, 0x89, 0x38, 0x28, 0x1b,
	0x3c, 0xa2, 0xac, 0xf8, 0x17, 0x91, 0x19, 0xe5, 0xc4, 0x25, 0x4c, 0x56, 0xba, 0x75, 0x4a, 0x57,
	0xe8, 0x2d, 0xd3, 0xb8, 0x44, 0x3e, 0x24, 0x69, 0x5f, 0xf4, 0x6a, 0x1f, 0x4a, 0x22, 0x7b, 0x82,
	0x4e, 0xaf, 0x55, 0xf5, 0x0d, 0xb7, 0xf5, 0x2f, 0xe4, 0x74, 0x12, 0xd9, 0x13, 0xe4, 0x68, 0xe3,
	0x1b, 0x13, 0x3e, 0x0a, 0x88, 0xfc, 0x6f, 0xb8, 0x23, 0x65, 0xda, 0x03, 0xd2, 0xc3, 0xad, 0x65,
	0xed, 0x7c, 0x53, 0xe6, 0xf5, 0x3c, 0x20, 0xbf, 0x66, 0xfc, 0x57, 0xbf, 0xfd, 0x1f, 0x00, 0x00,
	0xff, 0xff, 0x4c, 0x61, 0x34, 0xb8, 0xf8, 0x03, 0x00, 0x00,
}
